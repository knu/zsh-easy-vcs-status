# -*- mode: sh -*-
#
# easy-vcs-status - a zle tweak for easy access to VCS status
#
# Copyright (c) 2013-2015 Akinori MUSHA
# Licensed under the 2-clause BSD license.
#
# This tweak allows user to pop up VCS status using the completion
# menu UI with a key combination (default: `Meta-Shift-S`) whenever
# you are on the command line.
#
# Hit RET to fix the output on the terminal, and hit SPC to paste the
# last shell word on a selected line to the command line as result of
# completion.
#
# See https://github.com/knu/zsh-easy-vcs-status for more information.

vcs-status() {
    emulate -L zsh
    local cmd="$(vcs-status-command)" || return 1
    ${(z)cmd}
}

vcs-status-command() {
    emulate -L zsh
    local vcs=${vcs_info_msg_0_%%\;*} cmd

    [[ -n $vcs ]] || return 1

    zstyle -s ":easy-vcs-status:command" $vcs cmd

    if [[ -n $cmd ]]; then
        print "$cmd"
        return
    fi

    case $vcs in
        git|git-svn)
            print 'git -c color.ui=always status' ;;
        svn)
            print 'svn status' ;;
        cvs)
            print 'cvs -n up' ;;
        p4)
            print 'p4 status' ;;
        hg)
            print 'hg status' ;;
        bzr)
            print 'bzr status' ;;
        *)
            return 1
    esac
}

open-vcs-status() {
    emulate -L zsh
    setopt extended_glob
    local vcs=${vcs_info_msg_0_%%\;*}
    local OLBUFFER ORBUFFER n arg
    local -a lines fields

    [[ -n "$(vcs-status-command)" ]] || {
        print -n '\a'
        return 1
    }
    OLBUFFER=$LBUFFER
    ORBUFFER=$RBUFFER
    BUFFER="(vcs-status ($vcs) "
    CURSOR=$#BUFFER
    zle reset-prompt
    zle menu-complete

    if [[ -n "$vcs_status_output" ]]; then
        case $KEYS in
            $' ')
                n=${${BUFFER%/*}##*\[0#}
                if [[ -n $n ]]; then
                    lines=("${(@f)vcs_status_output_text}")
                    fields=(${(z)${lines[$n]}})
                    arg=${(Q)fields[$#fields]}
                    if [[ $arg == *[.:\)] ]]; then
                        # Ignore if it does not look like a path name
                        arg=
                    fi
                fi
                ;;
            $'\r')
                print
                print -r "$vcs_status_output"
                ;;
        esac
    fi

    # Cache the output for awhile
    sched +5 unset vcs_status_output vcs_status_output_text

    LBUFFER="$OLBUFFER${arg:+${(q)arg}}"
    RBUFFER="$ORBUFFER"
    zle reset-prompt
}

zle -N open-vcs-status

_vcs-status() {
    emulate -L zsh
    setopt extended_glob
    local -a lines values
    local i n

    if [[ -z $vcs_status_output ]]; then
        vcs_status_output="$(vcs-status)"
        # Expand tabs and remove escape sequences.  They break display
        # when scrolling or folding concerns.
        vcs_status_output_text="$(expand <<<"${vcs_status_output//$'\e'\[[0-9;]#[mK]}")"
    fi

    lines=("${(@f)vcs_status_output_text}")

    if (($#lines == 0)); then
        lines=('(empty)')
    fi
    n=$#lines

    for i in {1..$n}; do
        values[$i]=$(printf '[%0*u/%u])' $#n $i $n)
    done

    if (($#lines == 1)); then
        lines=($lines '[END]')
        values=($values $'\e[7;33m'"[END])"$'\e[m')
    fi

    compadd -QUlod lines -- ${values[@]}
    compstate[insert]=menu
}

compdef _vcs-status vcs-status

easy-vcs-status() {
    emulate -L zsh
    local key
    zstyle -s ":easy-vcs-status:bindkey" open key

    bindkey ${key:-'^[S'} open-vcs-status

    zstyle -s ":easy-vcs-status:bindkey" close key

    zmodload zsh/complist
    bindkey -M menuselect ${key:-'^[S'} send-break
}

[[ -o kshautoload ]] || easy-vcs-status "$@"
